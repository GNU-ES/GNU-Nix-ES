# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
       - master
       - dev
       - initial-stuff

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

#    - name: Run ALL examples
#      run: |
#        ./run.sh

#    - name: Run example!
#      run: |
#        cd src/examples/nix-in-docker-ubuntu-20-04-adduser-nix-install-sudo-flake-python3
#        ./run.sh

    - name: Inject variable and move folder
      run: |
        ./src/to-run-in-github-action/in-action.sh

    - uses: EndBug/add-and-commit@v4 # You can change this to use a specific version
      with:
    #    # The arguments for the `git add` command (see the paragraph below for more info)
    #    # Default: '.'
    #    add: 'src'

        # The name of the user that will be displayed as the author of the commit
        # Default: author of the commit that triggered the run
        author_name: GNU-Nix-ES

        # The email of the user that will be displayed as the author of the commit
        # Default: author of the commit that triggered the run
        author_email: pedroregispoar@gmail.com

    #    # The local path to the directory where your repository is located. You should use actions/checkout first to set it up
    #    # Default: '.'
    #    cwd: './path/to/the/repo'

    #    # Whether to use the --force option on `git add`, in order to bypass eventual gitignores
    #    # Default: false
    #    force: true

    #    # Whether to use the --signoff option on `git commit`
    #    # Default: false
    #    signoff: true

        # The message for the commit
        # Default: 'Commit from GitHub Actions'
#        message: 'Add REVISION'

    #    # Name of the branch to use, if different from the one that triggered the workflow
    #    # Default: the branch that triggered the workflow (from GITHUB_REF)
    #    ref: 'someOtherBranch'

    #    # The arguments for the `git rm` command (see the paragraph below for more info)
    #    # Default: ''
    #    remove: "./dir/old_file.js"

#        # Name of the tag to add to the new commit (see the paragraph below for more info)
#        # Default: ''
#        tag: "$(git rev-parse $(git rev-parse --short HEAD))"

      env:
        # This is necessary in order to push a commit to the repo
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Leave this line unchanged

    - name: Inject variables after run!
      run: |
        cd src/to-run-in-github-action/
        ./inject-revision-and-folder-name.sh ../examples "$(cat folder-name.txt)"

    - uses: EndBug/add-and-commit@v4 # You can change this to use a specific version
      with:
    #    # The arguments for the `git add` command (see the paragraph below for more info)
    #    # Default: '.'
    #    add: 'src'

        # The name of the user that will be displayed as the author of the commit
        # Default: author of the commit that triggered the run
        author_name: GNU-Nix-ES

        # The email of the user that will be displayed as the author of the commit
        # Default: author of the commit that triggered the run
        author_email: pedroregispoar@gmail.com
      env:
        # This is necessary in order to push a commit to the repo
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Leave this line unchanged